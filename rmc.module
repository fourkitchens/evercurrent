<?php

/**
 * @file rmc.module
 */

// @todo RMP-199 Use single quotes instead of double quotes when possible.
define('RMC_ENV_URL', 'http://live-ricochet-maintenance.pantheon.io');
define('RMC_API_VERSION', 1);
define('RMC_MD5_MATCH', '/^[a-f0-9]{32}$/i');
define('RMC_URL', '/ricochet-maintenance/post-update');

// Statuses. Used for reflecting last run of updates transaction.
define('RMC_STATUS', 'rmc_status');
define('RMC_STATUS_OK', 0);
define('RMC_STATUS_WARNING', 1);
define('RMC_STATUS_ERROR', 2);
define('RMC_STATUS_MESSAGE', 'rmc_status_message');

/**
 * Date stamp set every time updates are tried sent.
 */
define('RMC_LAST_TRY', 'rmc_last_try');

/**
 * Implements hook_menu().
 */
function rmc_menu() {
  $items = array();

  $items['admin/config/system/rmc'] = array(
    'title' => 'Ricochet Maintenance Client',
    'description' => 'Manage client API key and settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rmc_settings_form'),
    'file' => 'rmc.admin.inc',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['api/rmc/key'] = array(
    'title' => 'Callback for receiving configuration',
    'type' => MENU_CALLBACK,
    'page callback' => 'rmc_key',
    'access callback' => 'rmc_is_listening',
  );
  return $items;
}

/**
 * Access callback for retrieving a new key.
 */
function rmc_is_listening() {
  return variable_get('rmc_listen', FALSE);
}

/**
 * Page callback for retrieving a new key.
 * To be run only if client actually want a new key.
 */
function rmc_key() {
  $received = json_decode($_POST['data'], TRUE);
  if (isset($received['key']) && _rmc_key_pattern_is_valid($received['key'])) {
    $key = $received['key'];
    variable_set('rmc_key', $key);
    // Even if the key is valid or not, close the listen mode.
    // We get an error immediately about the wrong key.
    variable_set('rmc_listen', FALSE);
    $message = 'Received';
    $type = 'status';
    module_load_include('inc', 'rmc', 'rmc.send');
    rmc_run_update_check(check_plain($key));
  }
  else {
    watchdog('rmc', 'Ditched key request with missing / buggy key.', 'error');
    variable_set('rmc_listen_status', 'error');
    $message = 'Invalid request.';
    $type = 'error';
  }
  $return_json = array(
    'message' => $message,
    'type' => $type
  );
  drupal_json_output($return_json);
  drupal_exit();
}

/**
 * Helper function.
 * Checks a key for a valid pattern.
 *
 * @param $key
 * A key to check
 *
 * @return bool
 * True if key is valid.
 */
function _rmc_key_pattern_is_valid($key) {
  return is_string($key) && preg_match(RMC_MD5_MATCH, $key);
}

/**
 * Implements hook_cron().
 */
function rmc_cron() {
  if (variable_get('rmc_send', FALSE)) {
    // Check if we are to send updates now.
    $last_run = variable_get(RMC_LAST_TRY, 0);
    $interval = variable_get('rmc_interval', 3600);

    // Check if last run plus interval is earlier than now
    if (($last_run + $interval) < time()) {
      module_load_include('inc', 'rmc', 'rmc.send');
      rmc_run_update_check();
    }
  }
}

/**
 * Implements hook_requirements().
 *
 * Allow us to display current status in the site's status page.
 */
function rmc_requirements($phase) {
  $requirements = array();
  // We only do stuff at runtime.
  if ($phase !== 'runtime') {
    return $requirements;
  }
  // @todo RMC-199 Just use line breaks for readability, no need for concatenation.
  // Listening enabled?
  $listen = variable_get('rmc_listen', FALSE);
  $listen_on_text = t(
    'The maintenance client is listening for a key to use. You should finish
    configuration on the server side, or turn the listening feature off in the
    settings.'
  );
  $requirements['rmc_listen'] = array(
    'title' => t('RMC Listening'),
    'value' => $listen ? t('Listening enabled') : t('Disabled'),
    'severity' => $listen ? REQUIREMENT_WARNING : REQUIREMENT_OK,
    'description' => $listen ? $listen_on_text : ''
  );
  // Last run
  $requirements['rmc_lastrun'] = array(
    'title' => t('RMC Last successful run'),
    'value' => _rmc_last_run(),
    'severity' => REQUIREMENT_OK,
  );
  // Drop last status to the panel
  $message = variable_get(RMC_STATUS_MESSAGE, FALSE);
  $severity = variable_get(RMC_STATUS, RMC_STATUS_WARNING);
  $requirements['rmc_status'] = array(
    'title' => t('RMC Runtime status'),
    'value' => $message ? $message : t('No communication with server yet.'),
    'severity' => $severity
  );
  return $requirements;
}

/**
 * Helper function.
 * Get interval since last try.
 */
function _rmc_last_run() {
  if ($last_run = variable_get(RMC_LAST_TRY, FALSE)) {
    $last_time = format_interval(time() - $last_run);
  }
  else {
    $last_time = t('Never.');
  }
  return t('%last_time',
    array('%last_time' => $last_time));
}
